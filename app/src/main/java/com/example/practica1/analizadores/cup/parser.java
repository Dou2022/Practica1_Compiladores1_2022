
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.practica1.analizadores.cup;

import java_cup.runtime.*;
import com.example.practica1.domain.*;
import com.example.practica1.analizadores.flex.AnalizadorLexico;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\004\000\002\005\006" +
    "\000\002\007\004\000\002\007\003\000\002\003\005\000" +
    "\002\003\006\000\002\003\006\000\002\003\007\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\011\000\002\012\007\000\002\013\006" +
    "\000\002\014\004\000\002\014\003\000\002\015\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\016\004\000\002\016" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\006\004\004\014\005\001\002\000\004\005" +
    "\014\001\002\000\004\036\104\001\002\000\010\002\ufffe" +
    "\004\ufffe\014\ufffe\001\002\000\010\002\011\004\010\014" +
    "\005\001\002\000\004\005\014\001\002\000\004\002\000" +
    "\001\002\000\010\002\uffff\004\uffff\014\uffff\001\002\000" +
    "\010\002\001\004\001\014\001\001\002\000\004\023\015" +
    "\001\002\000\012\007\017\015\021\020\020\022\023\001" +
    "\002\000\014\007\ufffa\015\ufffa\020\ufffa\022\ufffa\024\ufffa" +
    "\001\002\000\004\041\102\001\002\000\004\030\063\001" +
    "\002\000\004\030\034\001\002\000\014\007\017\015\021" +
    "\020\020\022\023\024\033\001\002\000\004\030\024\001" +
    "\002\000\004\041\026\001\002\000\006\026\027\027\030" +
    "\001\002\000\006\026\ufff4\027\ufff4\001\002\000\004\041" +
    "\031\001\002\000\014\007\ufff8\015\ufff8\020\ufff8\022\ufff8" +
    "\024\ufff8\001\002\000\006\026\ufff5\027\ufff5\001\002\000" +
    "\014\007\ufffb\015\ufffb\020\ufffb\022\ufffb\024\ufffb\001\002" +
    "\000\010\002\ufffc\004\ufffc\014\ufffc\001\002\000\010\032" +
    "\037\036\043\040\036\001\002\000\016\024\uffed\026\uffed" +
    "\027\uffed\032\uffed\036\uffed\040\uffed\001\002\000\026\024" +
    "\uffe7\026\uffe7\027\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\001\002\000\010\032\037\036" +
    "\043\040\036\001\002\000\006\026\057\027\060\001\002" +
    "\000\014\026\ufff2\027\ufff2\032\037\036\043\040\036\001" +
    "\002\000\024\024\uffec\026\uffec\027\uffec\031\046\032\047" +
    "\033\051\034\050\036\uffec\040\uffec\001\002\000\010\032" +
    "\037\036\043\040\036\001\002\000\014\031\046\032\047" +
    "\033\051\034\050\037\045\001\002\000\026\024\uffe5\026" +
    "\uffe5\027\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\001\002\000\010\032\037\036\043\040" +
    "\036\001\002\000\010\032\037\036\043\040\036\001\002" +
    "\000\010\032\037\036\043\040\036\001\002\000\010\032" +
    "\037\036\043\040\036\001\002\000\026\024\uffe9\026\uffe9" +
    "\027\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\001\002\000\026\024\uffe8\026\uffe8\027\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\001\002\000\026\024\uffea\026\uffea\027\uffea\031\uffea" +
    "\032\uffea\033\051\034\050\036\uffea\037\uffea\040\uffea\001" +
    "\002\000\026\024\uffeb\026\uffeb\027\uffeb\031\uffeb\032\uffeb" +
    "\033\051\034\050\036\uffeb\037\uffeb\040\uffeb\001\002\000" +
    "\016\024\uffee\026\uffee\027\uffee\032\uffee\036\uffee\040\uffee" +
    "\001\002\000\010\032\037\036\043\040\036\001\002\000" +
    "\014\007\ufff7\015\ufff7\020\ufff7\022\ufff7\024\ufff7\001\002" +
    "\000\014\026\ufff3\027\ufff3\032\037\036\043\040\036\001" +
    "\002\000\026\024\uffe6\026\uffe6\027\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\036\uffe6\037\uffe6\040\uffe6\001\002\000" +
    "\004\023\064\001\002\000\010\032\037\036\043\040\036" +
    "\001\002\000\006\026\066\027\067\001\002\000\004\023" +
    "\071\001\002\000\004\025\070\001\002\000\014\007\ufff6" +
    "\015\ufff6\020\ufff6\022\ufff6\024\ufff6\001\002\000\010\032" +
    "\037\036\043\040\036\001\002\000\012\026\073\032\037" +
    "\036\043\040\036\001\002\000\010\032\037\036\043\040" +
    "\036\001\002\000\012\024\075\032\037\036\043\040\036" +
    "\001\002\000\006\026\ufff1\027\ufff1\001\002\000\012\026" +
    "\077\032\037\036\043\040\036\001\002\000\010\032\037" +
    "\036\043\040\036\001\002\000\012\024\101\032\037\036" +
    "\043\040\036\001\002\000\006\026\ufff0\027\ufff0\001\002" +
    "\000\004\025\103\001\002\000\014\007\ufff9\015\ufff9\020" +
    "\ufff9\022\ufff9\024\ufff9\001\002\000\004\041\105\001\002" +
    "\000\004\037\106\001\002\000\010\002\uffef\004\uffef\014" +
    "\uffef\001\002\000\010\002\ufffd\004\ufffd\014\ufffd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\006\002\006\013\005\001\001\000\004\005" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\011\001\001\000\004\005\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\015\007\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\031\001\001\000\002\001\001\000\004\010\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\037\014\040\015\034\016\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\061\001\001\000\002\001\001\000\006\015\055\016\041" +
    "\001\001\000\002\001\001\000\004\016\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\054\001\001" +
    "\000\004\016\053\001\001\000\004\016\052\001\001\000" +
    "\004\016\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\060\015\034\016\041\001\001\000\002\001\001" +
    "\000\006\015\055\016\041\001\001\000\002\001\001\000" +
    "\004\012\064\001\001\000\010\014\075\015\034\016\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\071\015\034\016\041" +
    "\001\001\000\006\015\055\016\041\001\001\000\010\014" +
    "\073\015\034\016\041\001\001\000\006\015\055\016\041" +
    "\001\001\000\002\001\001\000\006\015\055\016\041\001" +
    "\001\000\010\014\077\015\034\016\041\001\001\000\006" +
    "\015\055\016\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


	// Connect this parser to a scanner!

    public parser(AnalizadorLexico lexico){
        super(lexico);
        System.out.println("Se ingreso al analizador sintactico");
    }

	private Evaluacion evaluacion = new Evaluacion();
    String[] arregloTexto = new String[0];
    Double[] arregloEntero = new Double[0];
    Double[][] arregloUnir = new Double[0][2];
    Barra iBarra = new Barra();

    private ArrayList<Grafico> listadoGrafico = new ArrayList<>();

    public ArrayList<Grafico> getListado(){
        return listadoGrafico;
    }
    public void setListado(Grafico list){
        listadoGrafico.add(list);
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }
    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            System.out.println("public void unrecoveredsyntax_error");
        }
    }
    public void syntax_error(Symbol cur_token) {
        System.out.println("Error "+cur_token);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= inicio DEF grafica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= inicio ejecutar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= ejecutar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= DEF grafica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // grafica ::= BARRAS LLI estructuraBarra LLF 
            {
              Object RESULT =null;
		setListado(new Grafico("Barra",iBarra)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("grafica",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // estructuraBarra ::= estructuraBarra tipoBarra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraBarra",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructuraBarra ::= tipoBarra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraBarra",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipoBarra ::= TITULO TEXT FIN 
            {
              Object RESULT =null;
		int obj1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int obj1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String obj1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("texto"+obj1); iBarra.setTitulo(obj1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBarra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipoBarra ::= EJEX CRI arreglo_texto CRF 
            {
              Object RESULT =null;
		System.out.println("sintactico texto"); iBarra.setEjeX(arregloTexto); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBarra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoBarra ::= EJEY CRI arreglo_entero CRF 
            {
              Object RESULT =null;
		System.out.println("sintactico entero "); iBarra.setEjeY(arregloEntero); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBarra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoBarra ::= UNIR CRI arreglo_unir CRF FIN 
            {
              Object RESULT =null;
		 System.out.println("sintactico unir"); iBarra.setUnir(arregloUnir); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoBarra",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arreglo_texto ::= arreglo_texto COMA TEXT 
            {
              Object RESULT =null;
		int textoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Separador.arregloTexto(arregloTexto,texto);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_texto",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arreglo_texto ::= TEXT 
            {
              Object RESULT =null;
		int texto2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int texto2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String texto2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Separador.arregloTexto(arregloTexto,texto2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_texto",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arreglo_entero ::= arreglo_entero COMA expr_list 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double entero = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Separador.arregloEntero(arregloEntero,entero); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_entero",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arreglo_entero ::= expr_list 
            {
              Object RESULT =null;
		int entero2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entero2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double entero2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Separador.arregloEntero(arregloEntero,entero2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_entero",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arreglo_unir ::= arreglo_unir COMA LLI expr_list COMA expr_list LLF 
            {
              Object RESULT =null;
		int enteroPleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int enteroPright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double enteroP = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int enteroSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int enteroSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double enteroS = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Separador.arregloUnir(arregloUnir,new Double[]{enteroP,enteroS});
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_unir",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arreglo_unir ::= LLI expr_list COMA expr_list LLF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arreglo_unir",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ejecutar ::= EJECUTAR LPAREN TEXT RPAREN 
            {
              Object RESULT =null;
		int ejecutoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ejecutoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ejecuto = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecutar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr_list ::= expr_list expr_part 
            {
              Double RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr_list ::= expr_part 
            {
              Double RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double ee = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ee; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr_part ::= expr 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr PLUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 + e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr MINUS expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 - e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr TIMES expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 * e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr DIVIDE expr 
            {
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1/ e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= MINUS expr 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = 0 - e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
